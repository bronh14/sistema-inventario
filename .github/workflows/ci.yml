name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import pandas, matplotlib, PIL, xlsxwriter; print('All dependencies imported successfully')"
    
    - name: Test installation
      run: |
        pip install -e .
        python -c "import main; print('Main module imported successfully')"

  build-windows:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        python build_exe.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sistema-inventario-windows
        path: dist/

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        python build_exe.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sistema-inventario-linux
        path: dist/

  build-macos:
    needs: test
    runs-on: macos-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        python build_exe.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sistema-inventario-macos
        path: dist/

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release assets
      run: |
        mkdir -p release-assets
        cp -r sistema-inventario-windows/* release-assets/
        cp -r sistema-inventario-linux/* release-assets/
        cp -r sistema-inventario-macos/* release-assets/
    
    - name: Upload to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-assets/
        asset_name: sistema-inventario-${{ github.event.release.tag_name }}
        asset_content_type: application/zip 